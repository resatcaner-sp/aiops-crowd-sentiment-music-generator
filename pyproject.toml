[project]
name = "aiops-crowd-sentiment-music-generator"
version = "0.1.0"
description = "Crowd Noise Sentiment-to-Music Generator"
authors = [
    { name = "Caner Bas ", email = "caner.bas@statsperform.com"}
]
readme = "README.md"
packages = []
requires-python = ">=3.12"
dynamic = [ "dependencies" ]

[tool.poetry]
requires-poetry = "^2.0"
packages = [
    {include = "crowd_sentiment_music_generator", from = "src"},
    # PEP 561. File marker to indicate that the package is typed.
    {include = "py.typed", from = "src/crowd_sentiment_music_generator"},
]

[[tool.poetry.source]]
name = "nexus"
url = "https://nexus.statsperform.tools/repository/public-python/simple"
priority = "primary"

[tool.poetry.dependencies]
python = "^3.12"
pyyaml = "^6.0.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.3"
mypy = "^1.10.0"
pytest = "^8.2.0"
pytest-env = "^1.1.3"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
pytest-random-order = "^1.1.1"
pytest-asyncio = "^0.23.6"
pre-commit = "^3.7.1"
gitlint = "^0.19.1"
platformdirs = "^3.5.1"
filelock = "^3.12.0"
distlib = "^0.3.7"
types-PyYAML = "^6.0.12.10" 

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
extend-safe-fixes = ["TCH",]
select = [
    "A",       # prevent using keywords that clobber python builtins
    "B",       # bugbear: security warnings
    "C",       # Mccabe complexity
    "D",       # pydocstyle
    "E",       # pycodestyle
    "F",       # pyflakes
    "I",       # Isort. Import order
    "W",       # Warnings
    "UP",      # alert you when better syntax is available in your python version
    "ARG",     # flake8-Unused-Arguments
    "PIE",     # flake8-pie
    "RET",     # flake8-return
    "RUF",     # the ruff developer's own rules
    "SIM",     # flake8-Simplify
    "TCH",     # Flake8-Type-Checking
    "COM",     # Flake8-Commas
    "ERA",     # Eradicate dead code
    "PLR1714", # Merge repeated comparisons using a set
    "PLR5501", # Use elif instead of else then if, to reduce indentation
    "TID252"   # Prefer absolute imports over relative imports from parent modules
]

ignore = [
    "COM812",# Supress because it sometimes conflicts with the formatter.
    "E501",  # Supress line-too-long warnings: they are handled by the formater.
    "E712",  # Allow using if x == False, as it's not always equivalent to if x.
    "UP017", # Allow timezone.utc instead of datetime.UTC.
    "E731",  # Do not assign a lambda expression, use a def
    "B008",  # Do not perform function calls in argument defaults,
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
]
pydocstyle.convention = "google"  # Enforce Google docstring style

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",        # Ignore docstring requirements for tests
    "ARG001",   # Ignore unused arguments in tests
]

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 5

[tool.mypy]
warn_return_any = true          # Warn on functions that return Any and have another return type in their signature
warn_unused_ignores = true      # Warns about unneeded # type: ignore comments.
warn_unused_configs = true      # Wanrs about unused mypy configurations in modules.
disallow_untyped_defs = true    # Disallow defining functions without type annotations
disallow_any_unimported = false  # Disallow using Any types from unfollowed imports
check_untyped_defs = true       # Type-checks the interior of functions without type annotations.
ignore_missing_imports = false   # Ignores missing stubs. Optional, use it if you want to avoid errors on missing stubs.

[tool.pytest.ini_options]
markers = [ "default: Default marker." ]
env = [ "APP_ENVIRONMENT=local" ]
pythonpath = ["src"]

[tool.coverage.run]
branch = true
relative_files = true
source = ["src"]

[tool.coverage.report]
show_missing = true
fail_under = 80
exclude_lines = [
    "if TYPE_CHECKING:"
]

[tool.ruff.lint.isort]
order-by-type = true
force-single-line = false
known-first-party = ["crowd_sentiment_music_generator", "tests"]
